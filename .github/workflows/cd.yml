name: Continuous Deployment

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform (create or destroy)'
        required: true
        default: 'create'
        type: choice
        options:
        - create
        - destroy

env:
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: "false"

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Set S3 key name and repo name
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        echo "S3_KEY=${REPO_NAME}/${{ secrets.AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
        echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_REGION: eu-central-1
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${AWS_BUCKET_NAME}" \
          -backend-config="key=${S3_KEY}" \
          -backend-config="region=${AWS_REGION}" \
          -backend-config="dynamodb_table=terraform-state-lock"
      timeout-minutes: 5

    - name: Terraform Plan
      env:
        TF_VAR_lambda_artifacts_bucket_name: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
        TF_VAR_repo_name: ${{ env.REPO_NAME }}
        TF_VAR_commit_sha: ${{ steps.slug.outputs.sha8 }}
      run: |
        cd terraform
        terraform plan \
          -var="repo_name=${REPO_NAME}" \
          -var="commit_sha=${{ steps.slug.outputs.sha8 }}" \
          -var="operation=${{ github.event.inputs.operation }}" \
          -out=tfplan \
          -lock=true \
          -lock-timeout=300s
      timeout-minutes: 10

    - name: Terraform Apply
      if: github.event.inputs.operation == 'create'
      env:
        TF_VAR_lambda_artifacts_bucket_name: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
        TF_VAR_repo_name: ${{ env.REPO_NAME }}
        TF_VAR_commit_sha: ${{ steps.slug.outputs.sha8 }}
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      timeout-minutes: 30

    - name: Terraform Destroy
      if: github.event.inputs.operation == 'destroy'
      env:
        TF_VAR_lambda_artifacts_bucket_name: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
        TF_VAR_repo_name: ${{ env.REPO_NAME }}
        TF_VAR_commit_sha: ${{ steps.slug.outputs.sha8 }}
      run: |
        cd terraform
        terraform destroy -auto-approve \
          -var="repo_name=${REPO_NAME}" \
          -var="commit_sha=${{ steps.slug.outputs.sha8 }}" \
          -var="operation=destroy"
      timeout-minutes: 30

    - name: Check Apply/Destroy Status
      if: failure()
      run: |
        echo "Terraform ${{ github.event.inputs.operation }} failed or timed out. Please check the logs and infrastructure state."
        exit 1