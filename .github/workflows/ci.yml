name: Continuous Integration

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Build partitionProcessorLambda
      run: |
        cd src/partitionProcessorLambda
        npm ci
        npm run build
        mkdir -p ../../dist/partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}
        cp -r node_modules dist/* ../../dist/partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}/

    - name: Build batchProcessorLambda
      run: |
        cd src/batchProcessorLambda
        npm ci
        npm run build
        mkdir -p ../../dist/batchProcessorLambda_${{ steps.slug.outputs.sha8 }}
        cp -r node_modules dist/* ../../dist/batchProcessorLambda_${{ steps.slug.outputs.sha8 }}/

    - name: Package Lambda functions
      run: |
        cd dist
        zip -r partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}
        zip -r batchProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip batchProcessorLambda_${{ steps.slug.outputs.sha8 }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Upload Lambda artifacts and cleanup old versions
      env:
        S3_BUCKET: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        
        upload_and_cleanup() {
          local prefix=$1
          local new_file=$2
          
          # Upload new artifact
          aws s3 cp dist/$new_file s3://${S3_BUCKET}/${REPO_NAME}/$new_file
          echo "Uploaded new artifact: $new_file"
          
          # List and delete old artifacts
          aws s3 ls s3://${S3_BUCKET}/${REPO_NAME}/${prefix} | awk '{print $4}' | while read old_file; do
            if [[ $old_file != $new_file ]]; then
              aws s3 rm s3://${S3_BUCKET}/${REPO_NAME}/$old_file
              echo "Deleted old artifact: $old_file"
            fi
          done
        }
        
        upload_and_cleanup "partitionProcessorLambda" "partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip"
        upload_and_cleanup "batchProcessorLambda" "batchProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip"

  terraform-plan:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Set S3 key name and repo name
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        echo "S3_KEY=${REPO_NAME}/${{ secrets.AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
        echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_REGION: eu-central-1
      run: |
        cd terraform
        terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${S3_KEY}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Format
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      env:
        TF_VAR_lambda_artifacts_bucket_name: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
        TF_VAR_repo_name: ${{ env.REPO_NAME }}
        TF_VAR_commit_sha: ${{ steps.slug.outputs.sha8 }}
      run: |
        cd terraform
        terraform plan -var="repo_name=${REPO_NAME}" -var="commit_sha=${{ steps.slug.outputs.sha8 }}"