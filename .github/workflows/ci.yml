name: Continuous Integration

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  prepare-and-upload-artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: [partitionProcessorLambda, batchProcessorLambda]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        registry-url: https://npm.daznplatform.com/
        scope: '@dazn'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-

    - name: Install dependencies
      run: |
        cd src/${{ matrix.lambda }}
        npm ci --quiet --no-progress

    - name: Build TypeScript
      run: |
        cd src/${{ matrix.lambda }}
        npx tsc

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Compress files
      run: |
        cd src/${{ matrix.lambda }}
        zip -r ${{ matrix.lambda }}_${{ steps.slug.outputs.sha8 }}.zip .
        mv ${{ matrix.lambda }}_${{ steps.slug.outputs.sha8 }}.zip ../../

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
      continue-on-error: true

    - name: Upload Lambda artifact to S3
      env:
        S3_BUCKET: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        aws s3 cp ${{ matrix.lambda }}_${{ steps.slug.outputs.sha8 }}.zip s3://${S3_BUCKET}/${REPO_NAME}/${{ matrix.lambda }}_${{ steps.slug.outputs.sha8 }}.zip
      continue-on-error: true

    - name: Check S3 upload status
      if: failure()
      run: |
        echo "S3 upload failed. Checking AWS CLI configuration:"
        aws configure list
        echo "Checking S3 bucket access:"
        aws s3 ls s3://${S3_BUCKET}

  cleanup-old-artifacts:
    needs: prepare-and-upload-artifacts
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Cleanup old Lambda versions
      env:
        S3_BUCKET: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        
        cleanup_old_versions() {
          local prefix=$1
          local new_file=$2
          
          aws s3 ls s3://${S3_BUCKET}/${REPO_NAME}/${prefix} | awk '{print $4}' | while read old_file; do
            if [[ $old_file != $new_file ]]; then
              aws s3 rm s3://${S3_BUCKET}/${REPO_NAME}/$old_file
              echo "Deleted old artifact: $old_file"
            fi
          done
        }
        
        cleanup_old_versions "partitionProcessorLambda" "partitionProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip"
        cleanup_old_versions "batchProcessorLambda" "batchProcessorLambda_${{ steps.slug.outputs.sha8 }}.zip"

  terraform-plan:
    needs: prepare-and-upload-artifacts
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: eu-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Set S3 key name and repo name
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        echo "S3_KEY=${REPO_NAME}/${{ secrets.AWS_BUCKET_KEY_NAME }}" >> $GITHUB_ENV
        echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_REGION: eu-central-1
      run: |
        cd terraform
        terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${S3_KEY}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Format
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      env:
        TF_VAR_lambda_artifacts_bucket_name: ${{ vars.AWS_LAMBDA_ARTIFACTS_S3_BUCKET }}
        TF_VAR_repo_name: ${{ env.REPO_NAME }}
        TF_VAR_commit_sha: ${{ steps.slug.outputs.sha8 }}
      run: |
        cd terraform
        terraform plan -var="repo_name=${REPO_NAME}" -var="commit_sha=${{ steps.slug.outputs.sha8 }}"